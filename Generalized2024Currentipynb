{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "9146e3dd",
   "metadata": {},
   "outputs": [],
   "source": [
    "# %matplotlib ipympl \n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import csv\n",
    "import datetime\n",
    "import matplotlib.pyplot as plt\n",
    "from scipy.stats import multivariate_normal\n",
    "from scipy.stats import norm\n",
    "from scipy.stats import boxcox\n",
    "from scipy.stats import yeojohnson"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "9a95b980",
   "metadata": {},
   "outputs": [],
   "source": [
    "# load all data into dataframe\n",
    "def load_data(path, file_names, aliases):\n",
    "    dates = {}\n",
    "    for data_set_idx in range(len(data_files)):\n",
    "        cur_alias = aliases[data_set_idx]\n",
    "        with open(path + data_files[data_set_idx] + '.csv', newline='') as csvfile:\n",
    "            spamreader = csv.reader(csvfile, delimiter=',', quotechar='|')\n",
    "            spamreader.__next__()\n",
    "            for row in spamreader:\n",
    "                try:\n",
    "                    cur_date = datetime.datetime.strptime(row[0], '%m/%d/%Y')\n",
    "\n",
    "                except Exception as e: \n",
    "                   continue\n",
    "                if not cur_date in dates:\n",
    "                    dates[cur_date] = {}\n",
    "#                     # need to generalize here\n",
    "#                 if data_set_idx == 0 or data_set_idx == 2:\n",
    "#                     dates[cur_date][cur_alias] = float(row[4])\n",
    "#                 elif data_set_idx == 1 or data_set_idx == 3 or data_set_idx == 4 or data_set_idx == 5:\n",
    "                try:\n",
    "                    dates[cur_date][cur_alias] = float(row[1])\n",
    "                except:\n",
    "                    print(row[1])\n",
    "                    print(cur_alias)\n",
    "                    print(row)\n",
    "                    \n",
    "\n",
    "    df = pd.DataFrame.from_dict(dates, orient='index')\n",
    "    # df.columns = aliases\n",
    "    df.reset_index(inplace=True)\n",
    "    df = df.rename(columns = {'index':'Date'})\n",
    "    df = df.sort_values('Date')\n",
    "    df = df.reset_index(drop=True)\n",
    "    return df\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "b1191f6f",
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "# not_null = df.query(baseline_asset + \".notnull()\")\n",
    "# not_null.reset_index(drop = True, inplace = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "d9cc06b2-3eea-4c50-990a-43c93913f4bf",
   "metadata": {},
   "outputs": [],
   "source": [
    "def load_div_data(asset_list, file_list):\n",
    "    div_data = {}\n",
    "    for asset, file_path in zip(asset_list, file_list):\n",
    "        # Initialize data structure for the asset\n",
    "        div_data[asset] = {\"payment_date\": set(), \"ex_date\": set(), \"amount\": {}}\n",
    "        \n",
    "        # Read CSV file into DataFrame\n",
    "        if file_path != None:\n",
    "            df = pd.read_csv(file_path + \".csv\", delimiter=',', header=0)\n",
    "            \n",
    "            # Iterate over rows in the DataFrame\n",
    "            for index, row in df.iterrows():\n",
    "                # Extract relevant data\n",
    "                ex_date = row[\"Ex/EFF Date\"]\n",
    "                cash_amount = row[\"Cash Amount\"]\n",
    "                payment_date = row[\"Payment Date\"]\n",
    "                \n",
    "                # Update div_data with extracted data\n",
    "                div_data[asset][\"ex_date\"].add(ex_date)\n",
    "                div_data[asset][\"payment_date\"].add(payment_date)\n",
    "                div_data[asset][\"amount\"][ex_date] = cash_amount\n",
    "            \n",
    "    return div_data\n",
    "\n",
    "\n",
    "def get_x_days_ret(asset, df, div_data, distance, idx):\n",
    "    start_idx = 0\n",
    "    end_idx = 0\n",
    "    if distance < 0:\n",
    "        distance = abs(distance)\n",
    "        start_idx = idx - distance\n",
    "        end_idx = idx + 1\n",
    "    else:\n",
    "        start_idx = idx\n",
    "        end_idx = idx + distance + 1\n",
    "        \n",
    "    num_shares = 1\n",
    "    dollars = 0\n",
    "    for i in range(start_idx, end_idx):\n",
    "        if df.iloc[i][\"Date\"] in div_data[\"payment_date\"]:\n",
    "            num_shares += dollars / df.iloc[i][asset]\n",
    "            dollars = 0\n",
    "        if df.iloc[i][\"Date\"] in div_data[\"ex_date\"]:\n",
    "            dollars += div_data[\"amount\"][df.iloc[i][\"Date\"]] * num_shares\n",
    "    final_val = num_shares * df.iloc[end_idx - 1][asset] + dollars\n",
    "    start_val = df.iloc[start_idx][asset]\n",
    "    return (final_val - start_val) / start_val\n",
    "            \n",
    "            \n",
    "            \n",
    "    \n",
    "\n",
    "def add_correlaries_div(cor_assets, cor_days_out, pred_distance, df, assets, div_data):\n",
    "    # stores percent changes from past x days \n",
    "    cors = [[] for i in range(len(cor_assets))]\n",
    "    # stores percent changes for x future days for each asset\n",
    "    futs = {}\n",
    "    for a in assets:\n",
    "        futs[a] = []\n",
    "    \n",
    "    # iterate through all data points\n",
    "    for idx, row in df.iterrows():\n",
    "        # past data points\n",
    "        for alias_idx, (asset, days_out) in enumerate(zip(cor_assets, cor_days_out)):\n",
    "            if idx > days_out: # check for enough data\n",
    "                # get percent change\n",
    "                time_period_change = get_x_days_ret(asset, df, div_data[asset], -days_out, idx)  \n",
    "                cors[alias_idx].append(time_period_change)\n",
    "            else:\n",
    "                cors[alias_idx].append(None)\n",
    "        \n",
    "        #future data\n",
    "        for asset in assets:\n",
    "            cur_price = row[asset]\n",
    "            if idx + pred_distance < df.shape[0] and not pd.isna(cur_price) and not pd.isna(df.iloc[idx + pred_distance][asset]):\n",
    "                time_period_change = get_x_days_ret(asset, df, div_data[asset], pred_distance, idx)  \n",
    "                futs[asset].append(time_period_change) \n",
    "            else:\n",
    "                futs[asset].append(None)\n",
    "    # input into data frame\n",
    "    for idx, (asset, days_out) in enumerate(zip(cor_assets, cor_days_out)):\n",
    "        name = asset + \"_\" + str(days_out) + \"_dys\"\n",
    "        df.insert(df.shape[1], name, cors[idx], True)\n",
    "    \n",
    "    for asset in futs.keys():\n",
    "        name = asset + \"_fut_\" + str(pred_distance) + \"dys\"\n",
    "        df.insert(df.shape[1], name, futs[asset], True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "9cca94d8",
   "metadata": {},
   "outputs": [],
   "source": [
    "# adds correlation metrix to dataframe\n",
    "def add_correlaries(cor_assets, cor_days_out, pred_distance, df, assets):\n",
    "    # stores percent changes from past x days \n",
    "    cors = [[] for i in range(len(cor_assets))]\n",
    "    # stores percent changes for x future days for each asset\n",
    "    futs = {}\n",
    "    for a in assets:\n",
    "        futs[a] = []\n",
    "    \n",
    "    # iterate through all data points\n",
    "    for idx, row in df.iterrows():\n",
    "        # past data points\n",
    "        for alias_idx, (asset, days_out) in enumerate(zip(cor_assets, cor_days_out)):\n",
    "            cur_price = row[asset]\n",
    "            if idx > days_out: # check for enough data\n",
    "                # get percent change\n",
    "                last_time_period = df.loc[idx - days_out - 1].at[asset]\n",
    "                time_period_change = (cur_price - last_time_period)/last_time_period\n",
    "                cors[alias_idx].append(time_period_change)           \n",
    "            else:\n",
    "                cors[alias_idx].append(None)\n",
    "        \n",
    "        #future data\n",
    "        for asset in assets:\n",
    "            cur_price = row[asset]\n",
    "            if idx + pred_distance < df.shape[0] and not pd.isna(cur_price) and not pd.isna(df.iloc[idx + pred_distance].at[asset]):\n",
    "                fut_val = df.iloc[idx + pred_distance].at[asset]\n",
    "                time_period_change = (fut_val - cur_price)/cur_price  \n",
    "                futs[asset].append(time_period_change) \n",
    "            else:\n",
    "                futs[asset].append(None)\n",
    "    # input into data frame\n",
    "    for idx, (asset, days_out) in enumerate(zip(cor_assets, cor_days_out)):\n",
    "        name = asset + \"_\" + str(days_out) + \"_dys\"\n",
    "        df.insert(df.shape[1], name, cors[idx], True)\n",
    "    \n",
    "    for asset in futs.keys():\n",
    "        name = asset + \"_fut_\" + str(pred_distance) + \"dys\"\n",
    "        df.insert(df.shape[1], name, futs[asset], True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "302592d8",
   "metadata": {},
   "outputs": [],
   "source": [
    "def add_pred_differences(pred_distance, baseline_asset, assets, df):\n",
    "    for idx, asset in enumerate(assets):\n",
    "#       for idx2, asset2 in enumerate(assets[idx + 1: ]): if you want all differences\n",
    "        if asset != baseline_asset:\n",
    "            change_asset = df[asset + \"_fut_\" + str(pred_distance) + \"dys\"]\n",
    "            change_baseline = df[baseline_asset + \"_fut_\" + str(pred_distance) + \"dys\"]\n",
    "            diff = change_asset - change_baseline \n",
    "            df.insert(df.shape[1], asset + \"_\" + baseline_asset + \"_\" + str(pred_distance) + \"dys_diff\", diff, True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "8c42dcc7",
   "metadata": {},
   "outputs": [],
   "source": [
    "# not_null.iloc[5700:5750,[0, 7,8, 9, 10,11,12,13,14,15,16,17,18,19,20]]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "38b6777e",
   "metadata": {},
   "outputs": [],
   "source": [
    "# not_null.iloc[-160:,0: 10]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "0a440989",
   "metadata": {},
   "outputs": [],
   "source": [
    "# not_null.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "f6a6e141",
   "metadata": {},
   "outputs": [],
   "source": [
    "# #use sklearn.preprocessing.PowerTransformer instead\n",
    "\n",
    "# plt.figure()\n",
    "\n",
    "# column_name = 'sp_20_dys'\n",
    "# column = not_null[column_name] \n",
    "# column = column[~np.isnan(column)]\n",
    "# print(column)\n",
    "# # column += np.array([1 for i in range(len(column))])\n",
    "# # print(column)\n",
    "# plt.figure()\n",
    "# plt.hist(column , color = 'red', bins = 500, density=True)\n",
    "# mean = np.mean(column)\n",
    "# std = np.std(column)\n",
    "# print(mean)\n",
    "# print(std)\n",
    "# x_axis = np.arange(-.3, .3, 0.01)\n",
    "\n",
    "# plt.plot(x_axis, norm.pdf(x_axis, mean, std))\n",
    "\n",
    "\n",
    "# plt.figure()\n",
    "# plt.hist(yeojohnson(column)[0] , color = 'red', bins = 500, density=True)\n",
    "# mean = np.mean(yeojohnson(column)[0])\n",
    "# std = np.std(yeojohnson(column)[0])\n",
    "# print(mean)\n",
    "# print(std)\n",
    "# x_axis = np.arange(-.3, .3, 0.01)\n",
    "\n",
    "# plt.plot(x_axis, norm.pdf(x_axis, mean, std))\n",
    "# # plt.hist(np.log(sp_not_null[column_name] + np.array([1 for i in range(len(sp_not_null[column_name]))])) , color = 'red', bins = 500, density=True)\n",
    "# # mean = np.mean(np.log(sp_not_null[column_name] + np.array([1 for i in range(len(sp_not_null[column_name]))])))\n",
    "# # std = np.std(np.log(sp_not_null[column_name] + np.array([1 for i in range(len(sp_not_null[column_name]))])))\n",
    "\n",
    "\n",
    "\n",
    "# # column += np.array([1 for i in range(len(column))])\n",
    "# # column = np.log(column)\n",
    "# # plt.figure()\n",
    "# # plt.hist(yeojohnson(column)[0] , color = 'red', bins = 500, density=True)\n",
    "# # mean = np.mean(yeojohnson(column)[0])\n",
    "# # std = np.std(yeojohnson(column)[0])\n",
    "# # print(mean)\n",
    "# # print(std)\n",
    "# # x_axis = np.arange(-.3, .3, 0.01)\n",
    "\n",
    "# plt.plot(x_axis, norm.pdf(x_axis, mean, std))\n",
    "# # plt.hist(sp_not_null['sp_fut_2wks'], color = 'red', bins = 500)\n",
    "# # plt.hist(sp_not_null['re_fut_2wks'], color = 'green', bins = 500, alpha = .5,)\n",
    "# # plt.hist(sp_not_null['bnd_fut_2wks'], color = 'blue', bins = 500, alpha = .5,)\n",
    "# # plt.hist(sp_not_null['gld_fut_2wks'], color = 'yellow', bins = 500, alpha = .5,)\n",
    "# # plt.hist(sp_not_null['eu_fut_2wks'], color = 'green', bins = 500, alpha = .5,)\n",
    "# # plt.hist(sp_not_null['jp_fut_2wks'], color = 'blue', bins = 500, alpha = .5,)\n",
    "# plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "13a2a30e",
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "# fig = plt.figure()\n",
    "# ax = fig.add_subplot(projection = '3d')\n",
    "\n",
    "# ax.scatter(not_null[\"sp_last_month\"], not_null[\"re_last_month\"], not_null[\"re_sp_2wk_diff\"])\n",
    "# ax.set_xlabel('sp_last_month')\n",
    "# ax.set_ylabel('re_last_month')\n",
    "# ax.set_zlabel('re_sp_2wk_diff')\n",
    "# plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "6c4b85e9",
   "metadata": {},
   "outputs": [],
   "source": [
    "def get_rvs(baseline, df, aliases, pred_distance, print_mats=False):\n",
    "    rvs = {}\n",
    "    \n",
    "    valid_cols = []\n",
    "    for col in df.columns:\n",
    "        if not col in aliases and col != \"Date\" and not \"diff\" in col and not \"fut\" in col:\n",
    "            valid_cols.append(col)\n",
    "\n",
    "    valid_cols.append(None)\n",
    "    \n",
    "    for asset in aliases:\n",
    "        if asset != baseline:\n",
    "            valid_cols[-1] = (asset + \"_\" + baseline + \"_\" + str(pred_distance) + \"dys_diff\")\n",
    "\n",
    "            cov_mat = df[valid_cols]\n",
    "            # trying out multiplying every times 100 to get larger covariacnce and then maybe wont get the issue with comuns being \n",
    "            # linera\n",
    "            # cov_mat = cov_mat.multiply(100)\n",
    "            cov_matrix = pd.DataFrame.cov(cov_mat)\n",
    "            cov_mat = cov_mat.cov()\n",
    "            cov_mat = cov_mat.to_numpy()\n",
    "            if print_mats:\n",
    "                print(asset)\n",
    "                print(cov_matrix)\n",
    "\n",
    "\n",
    "            # means of values\n",
    "            means = []\n",
    "            for col in valid_cols:\n",
    "                means.append(np.mean(df[col]))\n",
    "            if print_mats:\n",
    "                print(means)\n",
    "\n",
    "            rv = multivariate_normal(mean=means, cov=cov_mat, allow_singular=True)\n",
    "            rvs[asset] = rv\n",
    "    return rvs\n",
    "        \n",
    "\n",
    "\n",
    "def predict(asset, baseline, rv, inputs, get_plots=False, do_print=False, get_50_pt = False):\n",
    "    START = -.25\n",
    "    STOP = .25\n",
    "    INCREMENT = .00005\n",
    "\n",
    "    probs = []\n",
    "   \n",
    "    x = np.arange(START, STOP, INCREMENT)\n",
    "    inputs.append(None)\n",
    "    for val in x:\n",
    "        # make an array with all the current values\n",
    "        # insert past month performance\n",
    "        #\"sp\", \"re\", \"bnd\", \"eu\", \"jp\", \"gld\", future difference\n",
    "        inputs[-1] = val\n",
    "        probs.append(rv.pdf(inputs))\n",
    "\n",
    "\n",
    "    cdf = []\n",
    "    for idx in range(x.size - 1):\n",
    "        cur_prob = probs[idx]\n",
    "        next_prob = probs[idx + 1]\n",
    "        rieman_sum = min(cur_prob, next_prob) * INCREMENT\n",
    "        rieman_sum += max(cur_prob, next_prob) - min(cur_prob, next_prob) * INCREMENT / 2\n",
    "        if len(cdf) > 0:\n",
    "            cdf.append(rieman_sum + cdf[-1])\n",
    "        else:\n",
    "            cdf.append(rieman_sum)\n",
    "                                 \n",
    "    if get_plots:\n",
    "        fig1 = plt.figure()\n",
    "        ax = fig1.add_subplot(111)\n",
    "        plt.title(\"pdf\")\n",
    "        plt.xlabel(\"difference between performance of \" + asset + \" and \" + baseline)\n",
    "        plt.ylabel(\"probability\")\n",
    "        ax.plot(x, probs/cdf[-1])\n",
    "        plt.show()\n",
    "\n",
    "    for idx in range(len(cdf)):\n",
    "        cdf[idx] /= cdf[-1]\n",
    "\n",
    "    if get_plots:\n",
    "        fig2 = plt.figure()\n",
    "        ax = fig2.add_subplot(111)\n",
    "        plt.title(\"cdf\")\n",
    "        plt.xlabel(\"difference between performance of \" + asset + \" and \" + baseline)\n",
    "        plt.ylabel(\"probability\")\n",
    "        ax.plot(x[:-1], cdf)\n",
    "        plt.show() \n",
    "        \n",
    "    if get_50_pt:\n",
    "        # find 50% point\n",
    "        cur_prob = 0\n",
    "        idx = 0\n",
    "        while(cur_prob < .5):\n",
    "            cur_prob = cdf[idx]\n",
    "            idx += 1\n",
    "        fiftyfiftypt = x[idx]\n",
    "        if do_print:\n",
    "            print(\"50 50 change to be above or below\")\n",
    "            print(x[idx])\n",
    "\n",
    "\n",
    "    #find expected value\n",
    "    expected_value = 0\n",
    "    for idx in range(len(cdf)):\n",
    "        if idx == 0:\n",
    "            expected_value += cdf[idx] * x[idx]\n",
    "        else:\n",
    "            cur_prob = cdf[idx - 1]\n",
    "            next_prob = cdf[idx]\n",
    "            actual_prob = next_prob - cur_prob\n",
    "            expected_value += actual_prob * x[idx]\n",
    "                                 \n",
    "    if do_print:\n",
    "        print(\"Expected Value\")\n",
    "        print(expected_value)\n",
    "                                 \n",
    "    if get_50_pt:\n",
    "        return fiftyfiftypt, expected_value\n",
    "    else:\n",
    "        return expected_value"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "3af092e6",
   "metadata": {},
   "outputs": [],
   "source": [
    "def test_preds(assets, baseline, pred_distance, df_test, df_train):\n",
    "    rvs = get_rvs(baseline, df_train, assets, pred_distance)\n",
    "    preds = {}\n",
    "    actuals = {}\n",
    "    for asset in assets:\n",
    "        if asset != baseline:\n",
    "            preds[asset] = []\n",
    "            actuals[asset] = []\n",
    "    \n",
    "    pred_columns = []\n",
    "    for col_idx, col in enumerate(df_test.columns):\n",
    "        if not col in aliases and col != \"Date\" and not \"diff\" in col and not \"fut\" in col:\n",
    "            pred_columns.append(col_idx)\n",
    "            \n",
    "            \n",
    "    print('start')\n",
    "    for idx, row in df_test.iterrows():\n",
    "        for asset in assets:\n",
    "            if asset != baseline:\n",
    "#                 print(asset)\n",
    "                col_name = asset + \"_\" + baseline  + \"_\" + str(pred_distance) + \"dys_diff\"\n",
    "                actual = row[col_name]\n",
    "                actuals[asset].append(actual)\n",
    "#                 print(actual)\n",
    "                columns = []\n",
    "                pred_input = df_test.iloc[idx, pred_columns]\n",
    "                if not pred_input.isnull().any():\n",
    "                    prediction = predict(asset, baseline, rvs[asset], pred_input.tolist(), get_plots=False)\n",
    "                    preds[asset].append(prediction)\n",
    "                    # print(prediction)\n",
    "                else:\n",
    "                    preds[asset].append(None)\n",
    "#                     print(None)\n",
    "#                 print(\"---------\")\n",
    "        if idx % 10== 0:\n",
    "            print(idx)\n",
    "\n",
    "    return preds, actuals            "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "b9560539",
   "metadata": {},
   "outputs": [],
   "source": [
    "# inputs here\n",
    "\n",
    "# path = 'C:\\\\Users\\\\plant\\\\\n",
    "path = ''\n",
    "\n",
    "baseline_asset = 'sp'\n",
    "\n",
    "file_SP = 'SPY'  \n",
    "div_SP = 'SPYDividend'\n",
    "file_RE = 'IYR'\n",
    "div_RE = 'IYRDividend'\n",
    "file_BND = 'isharesBondIndexSince2003'\n",
    "div_BND = 'USAggBondDividend'\n",
    "file_EU = 'USD_EURHistoricalData'\n",
    "div_EU = None\n",
    "file_JP = 'USD_JPYHistoricalData'\n",
    "div_JP = None\n",
    "file_GLD = 'GoldFuturesHistoricalData'\n",
    "div_GLD = None\n",
    "file_MID = 'IJH'\n",
    "div_MID = 'IJHDividend'\n",
    "file_SML = 'IJR'\n",
    "div_SML = 'IJRDividend'\n",
    "file_RUT = 'IWM'\n",
    "div_RUT = 'IWMDividend'\n",
    "file_EST = 'EZU'\n",
    "div_EST = 'EZUDividend'\n",
    "file_EMR = 'EEM'\n",
    "div_EMR = 'EEMDividend'\n",
    "file_JST = 'EWJ'\n",
    "div_JST = 'EWJDividend'\n",
    "\n",
    "# data_files = [file_name_SP, file_name_RE, file_name_BND, file_name_EU, file_name_JPY, file_name_GOLD, file_name_RUT]\n",
    "# aliases = [\"sp\", \"re\", \"bnd\", \"eu\", \"jp\", \"gld\", 'rut']\n",
    "\n",
    "# # input correlaries\n",
    "# cor_assets = [\"sp\", \"re\", \"bnd\", \"eu\", \"jp\", \"gld\", 'rut', \"sp\", \"re\", \"bnd\", \"eu\", \"jp\", \"gld\", 'rut', \"sp\", \"re\", \"bnd\", \"eu\", \"jp\", \"gld\", 'rut', \"sp\", \"re\", \"bnd\", \"eu\", \"jp\", \"gld\", 'rut']\n",
    "# cor_days_out = [20, 20, 20, 20, 20, 20, 20, 10, 10, 10, 10, 10, 10, 10, 252, 252, 252, 252, 252, 252, 252, 60, 60, 60, 60, 60, 60, 60]\n",
    "# pred_distance = 10\n",
    "# assets = [\"sp\", \"re\", \"bnd\", \"eu\", \"jp\", \"gld\", 'rut']\n",
    "\n",
    "\n",
    "data_files = [file_SP, file_RE, file_BND, file_EU, file_JP, file_GLD, file_MID, file_SML, file_RUT, file_EST, file_EMR, file_JST]\n",
    "div_files = [div_SP, div_RE, div_BND, div_EU, div_JP, div_GLD, div_MID, div_SML, div_RUT, div_EST, div_EMR, div_JST]\n",
    "aliases = [\"sp\", \"re\", \"bnd\", \"eu\", \"jp\", \"gld\", \"mid\", \"sml\", \"rut\", \"est\", \"emr\", \"jst\"]\n",
    "\n",
    "# input correlaries\n",
    "# cor_assets = ['sp', \"re\", \"bnd\", \"eu\", \"jp\", \"gld\", \"sp\", \"re\", \"bnd\", \"eu\", \"jp\", \"gld\", \"sp\", \"re\", \"bnd\", \"eu\", \"jp\", \"gld\",  \"sp\", \"re\", \"bnd\", \"eu\", \"jp\", \"gld\"]\n",
    "# cor_days_out = [20,   20,    20,   20,   20,    20,   10,   10,   10, 10,   10,   10,   252,  252, 252, 252,  252,   252,    60,   60,    60,    60,    60,   60]\n",
    "\n",
    "days_out_list = [1, 5, 10, 20, 60, 120, 252]\n",
    "\n",
    "cor_assets = []\n",
    "cor_days_out = []\n",
    "\n",
    "for a in aliases:\n",
    "    for d in days_out_list:\n",
    "        cor_assets.append(a)\n",
    "        cor_days_out.append(d)\n",
    "\n",
    "# cor_assets = [\"sp\", \"re\", \"bnd\", \"eu\", \"jp\", \"gld\", \"mid\", \"sml\", \"rut\", \"est\", \"emr\", \"jst\"]\n",
    "# cor_days_out = [10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10]\n",
    "pred_distance = 10\n",
    "assets = [\"sp\", \"re\", \"bnd\", \"eu\", \"jp\", \"gld\", \"mid\", \"sml\", \"rut\", \"est\", \"emr\", \"jst\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3920ba1d",
   "metadata": {},
   "outputs": [],
   "source": [
    "df = load_data(path, data_files, aliases)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1e92f941",
   "metadata": {},
   "outputs": [],
   "source": [
    "df.iloc[1:2]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1162178c-2a28-4ad3-a0f1-2eb5f5a107ea",
   "metadata": {},
   "outputs": [],
   "source": [
    "df = df.query(baseline_asset + \".notnull()\")\n",
    "df.reset_index(drop = True, inplace = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "06653bbf",
   "metadata": {},
   "outputs": [],
   "source": [
    "# add_correlaries(cor_assets, cor_days_out, pred_distance, df, assets)\n",
    "div_data = load_div_data(aliases, div_files)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9bfa994e-5cbd-4e5e-bbf0-d60e48ef2d75",
   "metadata": {},
   "outputs": [],
   "source": [
    "add_correlaries_div(cor_assets, cor_days_out, pred_distance, df, assets, div_data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "fab83581",
   "metadata": {},
   "outputs": [],
   "source": [
    "add_pred_differences(pred_distance, baseline_asset, assets, df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b33d0016-a5f2-4a81-8de3-e5e67d68a472",
   "metadata": {},
   "outputs": [],
   "source": [
    "df.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e9c45b92-120c-47ca-bb42-c6c39c339643",
   "metadata": {},
   "outputs": [],
   "source": [
    "df.to_csv('AllData.csv', index=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ef663c3a-bae0-45e5-8ce5-44d97879425f",
   "metadata": {},
   "outputs": [],
   "source": [
    "df = df.copy()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "3edba2a6-c178-45f8-b267-f002e284dad1",
   "metadata": {},
   "outputs": [],
   "source": [
    "df = pd.read_csv('AllData.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "33eb06eb-60b0-464d-97e1-aa604f54c070",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>est</th>\n",
       "      <th>emr</th>\n",
       "      <th>bnd</th>\n",
       "      <th>sp_1_dys</th>\n",
       "      <th>sp_5_dys</th>\n",
       "      <th>sp_10_dys</th>\n",
       "      <th>sp_20_dys</th>\n",
       "      <th>sp_60_dys</th>\n",
       "      <th>sp_120_dys</th>\n",
       "      <th>sp_252_dys</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>3000</th>\n",
       "      <td>36.369999</td>\n",
       "      <td>22.064444</td>\n",
       "      <td>102.430000</td>\n",
       "      <td>-0.002070</td>\n",
       "      <td>0.009042</td>\n",
       "      <td>0.009972</td>\n",
       "      <td>0.018335</td>\n",
       "      <td>0.078382</td>\n",
       "      <td>0.073962</td>\n",
       "      <td>0.099434</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3001</th>\n",
       "      <td>36.445000</td>\n",
       "      <td>22.178888</td>\n",
       "      <td>102.379997</td>\n",
       "      <td>0.005476</td>\n",
       "      <td>0.014313</td>\n",
       "      <td>0.006729</td>\n",
       "      <td>0.028605</td>\n",
       "      <td>0.066256</td>\n",
       "      <td>0.087401</td>\n",
       "      <td>0.104649</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3002</th>\n",
       "      <td>36.345001</td>\n",
       "      <td>22.301111</td>\n",
       "      <td>102.360001</td>\n",
       "      <td>0.001485</td>\n",
       "      <td>0.008057</td>\n",
       "      <td>0.004719</td>\n",
       "      <td>0.029434</td>\n",
       "      <td>0.066058</td>\n",
       "      <td>0.086190</td>\n",
       "      <td>0.091760</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3003</th>\n",
       "      <td>36.419998</td>\n",
       "      <td>22.244444</td>\n",
       "      <td>102.570000</td>\n",
       "      <td>-0.001895</td>\n",
       "      <td>0.003729</td>\n",
       "      <td>0.002068</td>\n",
       "      <td>0.015936</td>\n",
       "      <td>0.063477</td>\n",
       "      <td>0.083646</td>\n",
       "      <td>0.089494</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3004</th>\n",
       "      <td>36.299999</td>\n",
       "      <td>22.427778</td>\n",
       "      <td>102.400002</td>\n",
       "      <td>-0.002146</td>\n",
       "      <td>0.000828</td>\n",
       "      <td>0.000497</td>\n",
       "      <td>0.012905</td>\n",
       "      <td>0.053976</td>\n",
       "      <td>0.080547</td>\n",
       "      <td>0.086179</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3005</th>\n",
       "      <td>36.145000</td>\n",
       "      <td>22.194445</td>\n",
       "      <td>102.400002</td>\n",
       "      <td>-0.004716</td>\n",
       "      <td>-0.001825</td>\n",
       "      <td>0.007200</td>\n",
       "      <td>0.008805</td>\n",
       "      <td>0.060379</td>\n",
       "      <td>0.078730</td>\n",
       "      <td>0.081543</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3006</th>\n",
       "      <td>35.595001</td>\n",
       "      <td>21.511110</td>\n",
       "      <td>102.300003</td>\n",
       "      <td>-0.012219</td>\n",
       "      <td>-0.019393</td>\n",
       "      <td>-0.005357</td>\n",
       "      <td>-0.003188</td>\n",
       "      <td>0.056173</td>\n",
       "      <td>0.072473</td>\n",
       "      <td>0.056830</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3007</th>\n",
       "      <td>35.375000</td>\n",
       "      <td>21.247778</td>\n",
       "      <td>102.260002</td>\n",
       "      <td>-0.006901</td>\n",
       "      <td>-0.027604</td>\n",
       "      <td>-0.019769</td>\n",
       "      <td>-0.000762</td>\n",
       "      <td>0.044614</td>\n",
       "      <td>0.065938</td>\n",
       "      <td>0.048512</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3008</th>\n",
       "      <td>35.474998</td>\n",
       "      <td>21.233334</td>\n",
       "      <td>102.330002</td>\n",
       "      <td>0.005084</td>\n",
       "      <td>-0.020804</td>\n",
       "      <td>-0.017153</td>\n",
       "      <td>-0.001515</td>\n",
       "      <td>0.054030</td>\n",
       "      <td>0.075925</td>\n",
       "      <td>0.050297</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3009</th>\n",
       "      <td>35.080002</td>\n",
       "      <td>21.274445</td>\n",
       "      <td>102.300003</td>\n",
       "      <td>-0.001433</td>\n",
       "      <td>-0.020104</td>\n",
       "      <td>-0.019293</td>\n",
       "      <td>-0.006459</td>\n",
       "      <td>0.061861</td>\n",
       "      <td>0.060910</td>\n",
       "      <td>0.044629</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3010</th>\n",
       "      <td>35.220001</td>\n",
       "      <td>21.301111</td>\n",
       "      <td>102.250000</td>\n",
       "      <td>0.004728</td>\n",
       "      <td>-0.010806</td>\n",
       "      <td>-0.012612</td>\n",
       "      <td>-0.002765</td>\n",
       "      <td>0.075560</td>\n",
       "      <td>0.085965</td>\n",
       "      <td>0.058813</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3011</th>\n",
       "      <td>34.959999</td>\n",
       "      <td>21.261110</td>\n",
       "      <td>102.389999</td>\n",
       "      <td>-0.006891</td>\n",
       "      <td>-0.005470</td>\n",
       "      <td>-0.024757</td>\n",
       "      <td>-0.018194</td>\n",
       "      <td>0.062197</td>\n",
       "      <td>0.075537</td>\n",
       "      <td>0.043809</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3012</th>\n",
       "      <td>35.470001</td>\n",
       "      <td>21.522223</td>\n",
       "      <td>102.540001</td>\n",
       "      <td>0.003300</td>\n",
       "      <td>0.004745</td>\n",
       "      <td>-0.022989</td>\n",
       "      <td>-0.018379</td>\n",
       "      <td>0.061694</td>\n",
       "      <td>0.088198</td>\n",
       "      <td>0.053394</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3013</th>\n",
       "      <td>35.099998</td>\n",
       "      <td>21.433332</td>\n",
       "      <td>102.790001</td>\n",
       "      <td>-0.008012</td>\n",
       "      <td>-0.008347</td>\n",
       "      <td>-0.028977</td>\n",
       "      <td>-0.026969</td>\n",
       "      <td>0.062128</td>\n",
       "      <td>0.081563</td>\n",
       "      <td>0.036300</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3014</th>\n",
       "      <td>35.150002</td>\n",
       "      <td>21.816668</td>\n",
       "      <td>102.419998</td>\n",
       "      <td>0.005271</td>\n",
       "      <td>-0.001689</td>\n",
       "      <td>-0.021759</td>\n",
       "      <td>-0.021273</td>\n",
       "      <td>0.069852</td>\n",
       "      <td>0.077161</td>\n",
       "      <td>0.039198</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3015</th>\n",
       "      <td>35.275002</td>\n",
       "      <td>21.777779</td>\n",
       "      <td>102.690002</td>\n",
       "      <td>0.010403</td>\n",
       "      <td>0.003950</td>\n",
       "      <td>-0.006899</td>\n",
       "      <td>0.000251</td>\n",
       "      <td>0.073984</td>\n",
       "      <td>0.085104</td>\n",
       "      <td>0.045872</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3016</th>\n",
       "      <td>34.755001</td>\n",
       "      <td>21.477777</td>\n",
       "      <td>102.839996</td>\n",
       "      <td>-0.010463</td>\n",
       "      <td>0.000338</td>\n",
       "      <td>-0.005133</td>\n",
       "      <td>-0.010463</td>\n",
       "      <td>0.074825</td>\n",
       "      <td>0.069187</td>\n",
       "      <td>0.035201</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3017</th>\n",
       "      <td>34.619999</td>\n",
       "      <td>21.211111</td>\n",
       "      <td>102.980003</td>\n",
       "      <td>-0.006090</td>\n",
       "      <td>-0.009024</td>\n",
       "      <td>-0.004322</td>\n",
       "      <td>-0.024005</td>\n",
       "      <td>0.069543</td>\n",
       "      <td>0.060087</td>\n",
       "      <td>0.020851</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3018</th>\n",
       "      <td>34.724998</td>\n",
       "      <td>21.500000</td>\n",
       "      <td>103.029999</td>\n",
       "      <td>-0.006128</td>\n",
       "      <td>-0.007142</td>\n",
       "      <td>-0.015429</td>\n",
       "      <td>-0.032317</td>\n",
       "      <td>0.046979</td>\n",
       "      <td>0.051409</td>\n",
       "      <td>0.017247</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3019</th>\n",
       "      <td>34.895000</td>\n",
       "      <td>21.466667</td>\n",
       "      <td>103.050003</td>\n",
       "      <td>-0.001969</td>\n",
       "      <td>-0.014293</td>\n",
       "      <td>-0.015957</td>\n",
       "      <td>-0.034942</td>\n",
       "      <td>0.032512</td>\n",
       "      <td>0.057527</td>\n",
       "      <td>0.018527</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3020</th>\n",
       "      <td>34.924999</td>\n",
       "      <td>21.661112</td>\n",
       "      <td>102.870003</td>\n",
       "      <td>0.002831</td>\n",
       "      <td>-0.021679</td>\n",
       "      <td>-0.017815</td>\n",
       "      <td>-0.030202</td>\n",
       "      <td>0.032326</td>\n",
       "      <td>0.060617</td>\n",
       "      <td>0.008717</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3021</th>\n",
       "      <td>35.294998</td>\n",
       "      <td>21.977777</td>\n",
       "      <td>102.820000</td>\n",
       "      <td>0.002995</td>\n",
       "      <td>-0.008374</td>\n",
       "      <td>-0.008039</td>\n",
       "      <td>-0.032596</td>\n",
       "      <td>0.035601</td>\n",
       "      <td>0.081458</td>\n",
       "      <td>0.022236</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3022</th>\n",
       "      <td>35.369999</td>\n",
       "      <td>21.998890</td>\n",
       "      <td>102.680000</td>\n",
       "      <td>0.001706</td>\n",
       "      <td>-0.000596</td>\n",
       "      <td>-0.009615</td>\n",
       "      <td>-0.032383</td>\n",
       "      <td>0.034534</td>\n",
       "      <td>0.099017</td>\n",
       "      <td>0.035812</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3023</th>\n",
       "      <td>35.320000</td>\n",
       "      <td>22.018888</td>\n",
       "      <td>103.029999</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.005566</td>\n",
       "      <td>-0.001615</td>\n",
       "      <td>-0.030546</td>\n",
       "      <td>0.034170</td>\n",
       "      <td>0.097477</td>\n",
       "      <td>0.034808</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3024</th>\n",
       "      <td>35.500000</td>\n",
       "      <td>22.308889</td>\n",
       "      <td>102.900002</td>\n",
       "      <td>0.006217</td>\n",
       "      <td>0.013814</td>\n",
       "      <td>-0.000677</td>\n",
       "      <td>-0.022421</td>\n",
       "      <td>0.027657</td>\n",
       "      <td>0.090238</td>\n",
       "      <td>0.041241</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3025</th>\n",
       "      <td>35.875000</td>\n",
       "      <td>22.500000</td>\n",
       "      <td>102.699997</td>\n",
       "      <td>0.006347</td>\n",
       "      <td>0.017368</td>\n",
       "      <td>-0.004687</td>\n",
       "      <td>-0.011554</td>\n",
       "      <td>0.020249</td>\n",
       "      <td>0.099390</td>\n",
       "      <td>0.043345</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3026</th>\n",
       "      <td>35.945000</td>\n",
       "      <td>22.571112</td>\n",
       "      <td>102.779999</td>\n",
       "      <td>0.003027</td>\n",
       "      <td>0.017402</td>\n",
       "      <td>0.008882</td>\n",
       "      <td>0.003703</td>\n",
       "      <td>0.016968</td>\n",
       "      <td>0.114881</td>\n",
       "      <td>0.048251</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3027</th>\n",
       "      <td>35.605000</td>\n",
       "      <td>22.547777</td>\n",
       "      <td>102.650002</td>\n",
       "      <td>-0.002599</td>\n",
       "      <td>0.013029</td>\n",
       "      <td>0.012426</td>\n",
       "      <td>0.008050</td>\n",
       "      <td>0.015797</td>\n",
       "      <td>0.109805</td>\n",
       "      <td>0.054143</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3028</th>\n",
       "      <td>35.855000</td>\n",
       "      <td>22.900000</td>\n",
       "      <td>103.080002</td>\n",
       "      <td>0.010676</td>\n",
       "      <td>0.023844</td>\n",
       "      <td>0.029543</td>\n",
       "      <td>0.013658</td>\n",
       "      <td>0.028662</td>\n",
       "      <td>0.110157</td>\n",
       "      <td>0.062290</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3029</th>\n",
       "      <td>35.595001</td>\n",
       "      <td>22.972221</td>\n",
       "      <td>103.099998</td>\n",
       "      <td>-0.001331</td>\n",
       "      <td>0.016164</td>\n",
       "      <td>0.030202</td>\n",
       "      <td>0.013762</td>\n",
       "      <td>0.026503</td>\n",
       "      <td>0.102470</td>\n",
       "      <td>0.049104</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3030</th>\n",
       "      <td>35.615002</td>\n",
       "      <td>23.016666</td>\n",
       "      <td>103.160004</td>\n",
       "      <td>0.001166</td>\n",
       "      <td>0.010933</td>\n",
       "      <td>0.028491</td>\n",
       "      <td>0.010168</td>\n",
       "      <td>0.019939</td>\n",
       "      <td>0.092520</td>\n",
       "      <td>0.050052</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3031</th>\n",
       "      <td>35.549999</td>\n",
       "      <td>22.942223</td>\n",
       "      <td>103.440002</td>\n",
       "      <td>-0.007487</td>\n",
       "      <td>0.000335</td>\n",
       "      <td>0.017743</td>\n",
       "      <td>0.009562</td>\n",
       "      <td>0.004377</td>\n",
       "      <td>0.087503</td>\n",
       "      <td>0.038833</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3032</th>\n",
       "      <td>35.875000</td>\n",
       "      <td>23.053333</td>\n",
       "      <td>102.910004</td>\n",
       "      <td>0.003604</td>\n",
       "      <td>0.006557</td>\n",
       "      <td>0.019671</td>\n",
       "      <td>0.009868</td>\n",
       "      <td>0.008507</td>\n",
       "      <td>0.083816</td>\n",
       "      <td>0.031619</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3033</th>\n",
       "      <td>36.200001</td>\n",
       "      <td>23.277779</td>\n",
       "      <td>103.050003</td>\n",
       "      <td>0.008602</td>\n",
       "      <td>0.004491</td>\n",
       "      <td>0.028442</td>\n",
       "      <td>0.026781</td>\n",
       "      <td>0.024516</td>\n",
       "      <td>0.095917</td>\n",
       "      <td>0.044271</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3034</th>\n",
       "      <td>36.439999</td>\n",
       "      <td>23.444445</td>\n",
       "      <td>103.070000</td>\n",
       "      <td>-0.000745</td>\n",
       "      <td>0.005080</td>\n",
       "      <td>0.021327</td>\n",
       "      <td>0.020636</td>\n",
       "      <td>0.017710</td>\n",
       "      <td>0.093611</td>\n",
       "      <td>0.048206</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3035</th>\n",
       "      <td>36.650002</td>\n",
       "      <td>23.500000</td>\n",
       "      <td>102.870003</td>\n",
       "      <td>0.003729</td>\n",
       "      <td>0.007653</td>\n",
       "      <td>0.018670</td>\n",
       "      <td>0.013895</td>\n",
       "      <td>0.020128</td>\n",
       "      <td>0.090279</td>\n",
       "      <td>0.042696</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3036</th>\n",
       "      <td>36.599998</td>\n",
       "      <td>23.427778</td>\n",
       "      <td>102.750000</td>\n",
       "      <td>0.000660</td>\n",
       "      <td>0.015925</td>\n",
       "      <td>0.016266</td>\n",
       "      <td>0.025292</td>\n",
       "      <td>0.032277</td>\n",
       "      <td>0.090999</td>\n",
       "      <td>0.047985</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3037</th>\n",
       "      <td>36.750000</td>\n",
       "      <td>23.388889</td>\n",
       "      <td>102.699997</td>\n",
       "      <td>-0.008085</td>\n",
       "      <td>0.004092</td>\n",
       "      <td>0.010676</td>\n",
       "      <td>0.023234</td>\n",
       "      <td>0.019071</td>\n",
       "      <td>0.078780</td>\n",
       "      <td>0.043391</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3038</th>\n",
       "      <td>36.799999</td>\n",
       "      <td>23.676666</td>\n",
       "      <td>102.730003</td>\n",
       "      <td>0.001331</td>\n",
       "      <td>-0.003146</td>\n",
       "      <td>0.001331</td>\n",
       "      <td>0.030913</td>\n",
       "      <td>0.018873</td>\n",
       "      <td>0.089207</td>\n",
       "      <td>0.047963</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3039</th>\n",
       "      <td>36.615002</td>\n",
       "      <td>23.590000</td>\n",
       "      <td>102.440002</td>\n",
       "      <td>-0.014868</td>\n",
       "      <td>-0.017236</td>\n",
       "      <td>-0.012243</td>\n",
       "      <td>0.017589</td>\n",
       "      <td>0.001351</td>\n",
       "      <td>0.067411</td>\n",
       "      <td>0.034994</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3040</th>\n",
       "      <td>36.700001</td>\n",
       "      <td>23.698889</td>\n",
       "      <td>102.489998</td>\n",
       "      <td>0.007167</td>\n",
       "      <td>-0.013869</td>\n",
       "      <td>-0.006322</td>\n",
       "      <td>0.021988</td>\n",
       "      <td>0.009294</td>\n",
       "      <td>0.073033</td>\n",
       "      <td>0.044235</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3041</th>\n",
       "      <td>36.849998</td>\n",
       "      <td>24.066668</td>\n",
       "      <td>102.389999</td>\n",
       "      <td>0.006614</td>\n",
       "      <td>-0.008003</td>\n",
       "      <td>0.007795</td>\n",
       "      <td>0.025676</td>\n",
       "      <td>0.020626</td>\n",
       "      <td>0.068040</td>\n",
       "      <td>0.046748</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3042</th>\n",
       "      <td>37.299999</td>\n",
       "      <td>24.510000</td>\n",
       "      <td>102.480003</td>\n",
       "      <td>0.009897</td>\n",
       "      <td>0.009981</td>\n",
       "      <td>0.014114</td>\n",
       "      <td>0.034063</td>\n",
       "      <td>0.030028</td>\n",
       "      <td>0.083036</td>\n",
       "      <td>0.056464</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3043</th>\n",
       "      <td>37.044998</td>\n",
       "      <td>24.468889</td>\n",
       "      <td>102.209999</td>\n",
       "      <td>-0.006588</td>\n",
       "      <td>0.001994</td>\n",
       "      <td>-0.001159</td>\n",
       "      <td>0.027250</td>\n",
       "      <td>0.011742</td>\n",
       "      <td>0.068846</td>\n",
       "      <td>0.048774</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3044</th>\n",
       "      <td>37.195000</td>\n",
       "      <td>24.537779</td>\n",
       "      <td>101.849998</td>\n",
       "      <td>0.004974</td>\n",
       "      <td>0.022175</td>\n",
       "      <td>0.004558</td>\n",
       "      <td>0.025982</td>\n",
       "      <td>0.015922</td>\n",
       "      <td>0.076834</td>\n",
       "      <td>0.043647</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3045</th>\n",
       "      <td>36.730000</td>\n",
       "      <td>24.133333</td>\n",
       "      <td>101.720001</td>\n",
       "      <td>-0.000495</td>\n",
       "      <td>0.014399</td>\n",
       "      <td>0.000330</td>\n",
       "      <td>0.019006</td>\n",
       "      <td>0.016101</td>\n",
       "      <td>0.077258</td>\n",
       "      <td>0.049273</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3046</th>\n",
       "      <td>36.910000</td>\n",
       "      <td>24.200001</td>\n",
       "      <td>101.800003</td>\n",
       "      <td>0.000413</td>\n",
       "      <td>0.008150</td>\n",
       "      <td>0.000083</td>\n",
       "      <td>0.016349</td>\n",
       "      <td>0.016861</td>\n",
       "      <td>0.072174</td>\n",
       "      <td>0.047800</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3047</th>\n",
       "      <td>37.575001</td>\n",
       "      <td>24.488890</td>\n",
       "      <td>102.089996</td>\n",
       "      <td>0.012457</td>\n",
       "      <td>0.010706</td>\n",
       "      <td>0.020793</td>\n",
       "      <td>0.031691</td>\n",
       "      <td>0.039204</td>\n",
       "      <td>0.081989</td>\n",
       "      <td>0.058109</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3048</th>\n",
       "      <td>37.525002</td>\n",
       "      <td>24.650000</td>\n",
       "      <td>102.120003</td>\n",
       "      <td>0.000489</td>\n",
       "      <td>0.017906</td>\n",
       "      <td>0.019935</td>\n",
       "      <td>0.021293</td>\n",
       "      <td>0.033673</td>\n",
       "      <td>0.080327</td>\n",
       "      <td>0.055078</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3049</th>\n",
       "      <td>37.695000</td>\n",
       "      <td>24.462221</td>\n",
       "      <td>101.900002</td>\n",
       "      <td>-0.003746</td>\n",
       "      <td>0.009074</td>\n",
       "      <td>0.031450</td>\n",
       "      <td>0.018822</td>\n",
       "      <td>0.026172</td>\n",
       "      <td>0.084486</td>\n",
       "      <td>0.064109</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            est        emr         bnd  sp_1_dys  sp_5_dys  sp_10_dys  \\\n",
       "3000  36.369999  22.064444  102.430000 -0.002070  0.009042   0.009972   \n",
       "3001  36.445000  22.178888  102.379997  0.005476  0.014313   0.006729   \n",
       "3002  36.345001  22.301111  102.360001  0.001485  0.008057   0.004719   \n",
       "3003  36.419998  22.244444  102.570000 -0.001895  0.003729   0.002068   \n",
       "3004  36.299999  22.427778  102.400002 -0.002146  0.000828   0.000497   \n",
       "3005  36.145000  22.194445  102.400002 -0.004716 -0.001825   0.007200   \n",
       "3006  35.595001  21.511110  102.300003 -0.012219 -0.019393  -0.005357   \n",
       "3007  35.375000  21.247778  102.260002 -0.006901 -0.027604  -0.019769   \n",
       "3008  35.474998  21.233334  102.330002  0.005084 -0.020804  -0.017153   \n",
       "3009  35.080002  21.274445  102.300003 -0.001433 -0.020104  -0.019293   \n",
       "3010  35.220001  21.301111  102.250000  0.004728 -0.010806  -0.012612   \n",
       "3011  34.959999  21.261110  102.389999 -0.006891 -0.005470  -0.024757   \n",
       "3012  35.470001  21.522223  102.540001  0.003300  0.004745  -0.022989   \n",
       "3013  35.099998  21.433332  102.790001 -0.008012 -0.008347  -0.028977   \n",
       "3014  35.150002  21.816668  102.419998  0.005271 -0.001689  -0.021759   \n",
       "3015  35.275002  21.777779  102.690002  0.010403  0.003950  -0.006899   \n",
       "3016  34.755001  21.477777  102.839996 -0.010463  0.000338  -0.005133   \n",
       "3017  34.619999  21.211111  102.980003 -0.006090 -0.009024  -0.004322   \n",
       "3018  34.724998  21.500000  103.029999 -0.006128 -0.007142  -0.015429   \n",
       "3019  34.895000  21.466667  103.050003 -0.001969 -0.014293  -0.015957   \n",
       "3020  34.924999  21.661112  102.870003  0.002831 -0.021679  -0.017815   \n",
       "3021  35.294998  21.977777  102.820000  0.002995 -0.008374  -0.008039   \n",
       "3022  35.369999  21.998890  102.680000  0.001706 -0.000596  -0.009615   \n",
       "3023  35.320000  22.018888  103.029999  0.000000  0.005566  -0.001615   \n",
       "3024  35.500000  22.308889  102.900002  0.006217  0.013814  -0.000677   \n",
       "3025  35.875000  22.500000  102.699997  0.006347  0.017368  -0.004687   \n",
       "3026  35.945000  22.571112  102.779999  0.003027  0.017402   0.008882   \n",
       "3027  35.605000  22.547777  102.650002 -0.002599  0.013029   0.012426   \n",
       "3028  35.855000  22.900000  103.080002  0.010676  0.023844   0.029543   \n",
       "3029  35.595001  22.972221  103.099998 -0.001331  0.016164   0.030202   \n",
       "3030  35.615002  23.016666  103.160004  0.001166  0.010933   0.028491   \n",
       "3031  35.549999  22.942223  103.440002 -0.007487  0.000335   0.017743   \n",
       "3032  35.875000  23.053333  102.910004  0.003604  0.006557   0.019671   \n",
       "3033  36.200001  23.277779  103.050003  0.008602  0.004491   0.028442   \n",
       "3034  36.439999  23.444445  103.070000 -0.000745  0.005080   0.021327   \n",
       "3035  36.650002  23.500000  102.870003  0.003729  0.007653   0.018670   \n",
       "3036  36.599998  23.427778  102.750000  0.000660  0.015925   0.016266   \n",
       "3037  36.750000  23.388889  102.699997 -0.008085  0.004092   0.010676   \n",
       "3038  36.799999  23.676666  102.730003  0.001331 -0.003146   0.001331   \n",
       "3039  36.615002  23.590000  102.440002 -0.014868 -0.017236  -0.012243   \n",
       "3040  36.700001  23.698889  102.489998  0.007167 -0.013869  -0.006322   \n",
       "3041  36.849998  24.066668  102.389999  0.006614 -0.008003   0.007795   \n",
       "3042  37.299999  24.510000  102.480003  0.009897  0.009981   0.014114   \n",
       "3043  37.044998  24.468889  102.209999 -0.006588  0.001994  -0.001159   \n",
       "3044  37.195000  24.537779  101.849998  0.004974  0.022175   0.004558   \n",
       "3045  36.730000  24.133333  101.720001 -0.000495  0.014399   0.000330   \n",
       "3046  36.910000  24.200001  101.800003  0.000413  0.008150   0.000083   \n",
       "3047  37.575001  24.488890  102.089996  0.012457  0.010706   0.020793   \n",
       "3048  37.525002  24.650000  102.120003  0.000489  0.017906   0.019935   \n",
       "3049  37.695000  24.462221  101.900002 -0.003746  0.009074   0.031450   \n",
       "\n",
       "      sp_20_dys  sp_60_dys  sp_120_dys  sp_252_dys  \n",
       "3000   0.018335   0.078382    0.073962    0.099434  \n",
       "3001   0.028605   0.066256    0.087401    0.104649  \n",
       "3002   0.029434   0.066058    0.086190    0.091760  \n",
       "3003   0.015936   0.063477    0.083646    0.089494  \n",
       "3004   0.012905   0.053976    0.080547    0.086179  \n",
       "3005   0.008805   0.060379    0.078730    0.081543  \n",
       "3006  -0.003188   0.056173    0.072473    0.056830  \n",
       "3007  -0.000762   0.044614    0.065938    0.048512  \n",
       "3008  -0.001515   0.054030    0.075925    0.050297  \n",
       "3009  -0.006459   0.061861    0.060910    0.044629  \n",
       "3010  -0.002765   0.075560    0.085965    0.058813  \n",
       "3011  -0.018194   0.062197    0.075537    0.043809  \n",
       "3012  -0.018379   0.061694    0.088198    0.053394  \n",
       "3013  -0.026969   0.062128    0.081563    0.036300  \n",
       "3014  -0.021273   0.069852    0.077161    0.039198  \n",
       "3015   0.000251   0.073984    0.085104    0.045872  \n",
       "3016  -0.010463   0.074825    0.069187    0.035201  \n",
       "3017  -0.024005   0.069543    0.060087    0.020851  \n",
       "3018  -0.032317   0.046979    0.051409    0.017247  \n",
       "3019  -0.034942   0.032512    0.057527    0.018527  \n",
       "3020  -0.030202   0.032326    0.060617    0.008717  \n",
       "3021  -0.032596   0.035601    0.081458    0.022236  \n",
       "3022  -0.032383   0.034534    0.099017    0.035812  \n",
       "3023  -0.030546   0.034170    0.097477    0.034808  \n",
       "3024  -0.022421   0.027657    0.090238    0.041241  \n",
       "3025  -0.011554   0.020249    0.099390    0.043345  \n",
       "3026   0.003703   0.016968    0.114881    0.048251  \n",
       "3027   0.008050   0.015797    0.109805    0.054143  \n",
       "3028   0.013658   0.028662    0.110157    0.062290  \n",
       "3029   0.013762   0.026503    0.102470    0.049104  \n",
       "3030   0.010168   0.019939    0.092520    0.050052  \n",
       "3031   0.009562   0.004377    0.087503    0.038833  \n",
       "3032   0.009868   0.008507    0.083816    0.031619  \n",
       "3033   0.026781   0.024516    0.095917    0.044271  \n",
       "3034   0.020636   0.017710    0.093611    0.048206  \n",
       "3035   0.013895   0.020128    0.090279    0.042696  \n",
       "3036   0.025292   0.032277    0.090999    0.047985  \n",
       "3037   0.023234   0.019071    0.078780    0.043391  \n",
       "3038   0.030913   0.018873    0.089207    0.047963  \n",
       "3039   0.017589   0.001351    0.067411    0.034994  \n",
       "3040   0.021988   0.009294    0.073033    0.044235  \n",
       "3041   0.025676   0.020626    0.068040    0.046748  \n",
       "3042   0.034063   0.030028    0.083036    0.056464  \n",
       "3043   0.027250   0.011742    0.068846    0.048774  \n",
       "3044   0.025982   0.015922    0.076834    0.043647  \n",
       "3045   0.019006   0.016101    0.077258    0.049273  \n",
       "3046   0.016349   0.016861    0.072174    0.047800  \n",
       "3047   0.031691   0.039204    0.081989    0.058109  \n",
       "3048   0.021293   0.033673    0.080327    0.055078  \n",
       "3049   0.018822   0.026172    0.084486    0.064109  "
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.iloc[3000: 3050, 10 :20]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "fb314bac-7252-40ae-af70-ecdbcef4a3df",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Date</th>\n",
       "      <th>sp</th>\n",
       "      <th>gld</th>\n",
       "      <th>jst</th>\n",
       "      <th>eu</th>\n",
       "      <th>jp</th>\n",
       "      <th>mid</th>\n",
       "      <th>sml</th>\n",
       "      <th>re_1_dys</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "Empty DataFrame\n",
       "Columns: [Date, sp, gld, jst, eu, jp, mid, sml, re_1_dys]\n",
       "Index: []"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.iloc[8060: 8061, [0, 1, 2, 3, 4, 5, 6, 7, 20]]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "id": "a5cbfcce-90f4-4267-9063-55543c4daacc",
   "metadata": {},
   "outputs": [],
   "source": [
    "columns_to_use = []\n",
    "dont_use = [ \"sp_252_dys\", \"rut_1_dys\", \"est_1_dys\",  \"est_5_dys\", \"est_20_dys\"]\n",
    "# \"sp_252_dys\",\n",
    "aliases_not_use = ['mid', 'sml', 'jst', 'est', 'emr', 'gld', 'jp', 'eu']\n",
    "# rut\n",
    "time_not_use = [1, 5, 120]\n",
    "for col in df.columns:\n",
    "    if col not in dont_use:\n",
    "        use = True\n",
    "        for a in aliases_not_use:\n",
    "            if a in col:\n",
    "                use = False\n",
    "        for t in time_not_use:\n",
    "            if \"_\" + str(t) + \"_\" in col:\n",
    "                use = False\n",
    "        if use:\n",
    "            columns_to_use.append(col)\n",
    "            \n",
    "aliases_to_use = []\n",
    "for a in aliases:\n",
    "    if not a in aliases_not_use:\n",
    "        aliases_to_use.append(a)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "id": "45b3fc03-cda9-4a1e-b355-9559dbdcd670",
   "metadata": {},
   "outputs": [],
   "source": [
    "df_test = df[(df['Date'] >= '2018-01-01') & (df['Date'] <= '2018-12-31')][columns_to_use]\n",
    "df_test = df_test.reset_index(drop=True)\n",
    "df_train = df[(df['Date'] < '2018-01-01')][columns_to_use]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "id": "5eac076e-264e-4285-a201-eafb2f8648fb",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Date</th>\n",
       "      <th>sp</th>\n",
       "      <th>rut</th>\n",
       "      <th>re</th>\n",
       "      <th>bnd</th>\n",
       "      <th>sp_10_dys</th>\n",
       "      <th>sp_20_dys</th>\n",
       "      <th>sp_60_dys</th>\n",
       "      <th>re_10_dys</th>\n",
       "      <th>re_20_dys</th>\n",
       "      <th>...</th>\n",
       "      <th>rut_20_dys</th>\n",
       "      <th>rut_60_dys</th>\n",
       "      <th>rut_252_dys</th>\n",
       "      <th>sp_fut_10dys</th>\n",
       "      <th>re_fut_10dys</th>\n",
       "      <th>bnd_fut_10dys</th>\n",
       "      <th>rut_fut_10dys</th>\n",
       "      <th>re_sp_10dys_diff</th>\n",
       "      <th>bnd_sp_10dys_diff</th>\n",
       "      <th>rut_sp_10dys_diff</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2018-01-02</td>\n",
       "      <td>268.769989</td>\n",
       "      <td>153.899994</td>\n",
       "      <td>80.599998</td>\n",
       "      <td>109.169998</td>\n",
       "      <td>0.008480</td>\n",
       "      <td>0.016297</td>\n",
       "      <td>0.055407</td>\n",
       "      <td>-0.022556</td>\n",
       "      <td>-0.018510</td>\n",
       "      <td>...</td>\n",
       "      <td>0.005751</td>\n",
       "      <td>0.024225</td>\n",
       "      <td>0.141268</td>\n",
       "      <td>0.040332</td>\n",
       "      <td>-0.035732</td>\n",
       "      <td>-0.004763</td>\n",
       "      <td>0.024172</td>\n",
       "      <td>-0.076064</td>\n",
       "      <td>-0.045095</td>\n",
       "      <td>-0.016160</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2018-01-03</td>\n",
       "      <td>270.470001</td>\n",
       "      <td>154.059998</td>\n",
       "      <td>80.470001</td>\n",
       "      <td>109.180000</td>\n",
       "      <td>0.008464</td>\n",
       "      <td>0.023965</td>\n",
       "      <td>0.063294</td>\n",
       "      <td>-0.029547</td>\n",
       "      <td>-0.012517</td>\n",
       "      <td>...</td>\n",
       "      <td>0.010561</td>\n",
       "      <td>0.026724</td>\n",
       "      <td>0.136806</td>\n",
       "      <td>0.032055</td>\n",
       "      <td>-0.043619</td>\n",
       "      <td>-0.007053</td>\n",
       "      <td>0.016098</td>\n",
       "      <td>-0.075674</td>\n",
       "      <td>-0.039108</td>\n",
       "      <td>-0.015958</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2018-01-04</td>\n",
       "      <td>271.609985</td>\n",
       "      <td>154.470001</td>\n",
       "      <td>79.209999</td>\n",
       "      <td>109.110001</td>\n",
       "      <td>0.016619</td>\n",
       "      <td>0.031992</td>\n",
       "      <td>0.069541</td>\n",
       "      <td>-0.015658</td>\n",
       "      <td>-0.022220</td>\n",
       "      <td>...</td>\n",
       "      <td>0.023455</td>\n",
       "      <td>0.033728</td>\n",
       "      <td>0.121135</td>\n",
       "      <td>0.032399</td>\n",
       "      <td>-0.022093</td>\n",
       "      <td>-0.008524</td>\n",
       "      <td>0.026737</td>\n",
       "      <td>-0.054493</td>\n",
       "      <td>-0.040923</td>\n",
       "      <td>-0.005663</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2018-01-05</td>\n",
       "      <td>273.420013</td>\n",
       "      <td>154.789993</td>\n",
       "      <td>79.290001</td>\n",
       "      <td>109.040001</td>\n",
       "      <td>0.023930</td>\n",
       "      <td>0.038672</td>\n",
       "      <td>0.073836</td>\n",
       "      <td>-0.004270</td>\n",
       "      <td>-0.020869</td>\n",
       "      <td>...</td>\n",
       "      <td>0.030422</td>\n",
       "      <td>0.032897</td>\n",
       "      <td>0.136574</td>\n",
       "      <td>0.033904</td>\n",
       "      <td>-0.015134</td>\n",
       "      <td>-0.008254</td>\n",
       "      <td>0.030105</td>\n",
       "      <td>-0.049038</td>\n",
       "      <td>-0.042158</td>\n",
       "      <td>-0.003799</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2018-01-08</td>\n",
       "      <td>273.920013</td>\n",
       "      <td>155.029999</td>\n",
       "      <td>79.739998</td>\n",
       "      <td>109.010002</td>\n",
       "      <td>0.023694</td>\n",
       "      <td>0.037301</td>\n",
       "      <td>0.074112</td>\n",
       "      <td>0.005042</td>\n",
       "      <td>-0.019309</td>\n",
       "      <td>...</td>\n",
       "      <td>0.024856</td>\n",
       "      <td>0.035259</td>\n",
       "      <td>0.142531</td>\n",
       "      <td>0.034207</td>\n",
       "      <td>-0.007148</td>\n",
       "      <td>-0.005596</td>\n",
       "      <td>0.031800</td>\n",
       "      <td>-0.041355</td>\n",
       "      <td>-0.039803</td>\n",
       "      <td>-0.002407</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>2018-01-09</td>\n",
       "      <td>274.540009</td>\n",
       "      <td>154.820007</td>\n",
       "      <td>78.820000</td>\n",
       "      <td>108.709999</td>\n",
       "      <td>0.026279</td>\n",
       "      <td>0.034010</td>\n",
       "      <td>0.078150</td>\n",
       "      <td>-0.012776</td>\n",
       "      <td>-0.033832</td>\n",
       "      <td>...</td>\n",
       "      <td>0.022522</td>\n",
       "      <td>0.034616</td>\n",
       "      <td>0.148516</td>\n",
       "      <td>0.031471</td>\n",
       "      <td>0.000888</td>\n",
       "      <td>-0.003863</td>\n",
       "      <td>0.026805</td>\n",
       "      <td>-0.030583</td>\n",
       "      <td>-0.035334</td>\n",
       "      <td>-0.004665</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>2018-01-10</td>\n",
       "      <td>274.119995</td>\n",
       "      <td>154.839996</td>\n",
       "      <td>77.860001</td>\n",
       "      <td>108.709999</td>\n",
       "      <td>0.025937</td>\n",
       "      <td>0.029327</td>\n",
       "      <td>0.075191</td>\n",
       "      <td>-0.029540</td>\n",
       "      <td>-0.046651</td>\n",
       "      <td>...</td>\n",
       "      <td>0.023059</td>\n",
       "      <td>0.036620</td>\n",
       "      <td>0.137776</td>\n",
       "      <td>0.033489</td>\n",
       "      <td>0.011302</td>\n",
       "      <td>-0.001288</td>\n",
       "      <td>0.027060</td>\n",
       "      <td>-0.022187</td>\n",
       "      <td>-0.034777</td>\n",
       "      <td>-0.006429</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>2018-01-11</td>\n",
       "      <td>276.119995</td>\n",
       "      <td>157.500000</td>\n",
       "      <td>77.589996</td>\n",
       "      <td>108.760002</td>\n",
       "      <td>0.032919</td>\n",
       "      <td>0.035010</td>\n",
       "      <td>0.081593</td>\n",
       "      <td>-0.036388</td>\n",
       "      <td>-0.053781</td>\n",
       "      <td>...</td>\n",
       "      <td>0.043876</td>\n",
       "      <td>0.055347</td>\n",
       "      <td>0.155285</td>\n",
       "      <td>0.037882</td>\n",
       "      <td>0.015208</td>\n",
       "      <td>-0.003586</td>\n",
       "      <td>0.013333</td>\n",
       "      <td>-0.022674</td>\n",
       "      <td>-0.041468</td>\n",
       "      <td>-0.024549</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>2018-01-12</td>\n",
       "      <td>277.920013</td>\n",
       "      <td>158.160004</td>\n",
       "      <td>76.959999</td>\n",
       "      <td>108.739998</td>\n",
       "      <td>0.037518</td>\n",
       "      <td>0.041874</td>\n",
       "      <td>0.087877</td>\n",
       "      <td>-0.049759</td>\n",
       "      <td>-0.063405</td>\n",
       "      <td>...</td>\n",
       "      <td>0.042035</td>\n",
       "      <td>0.062832</td>\n",
       "      <td>0.169131</td>\n",
       "      <td>0.024323</td>\n",
       "      <td>0.010395</td>\n",
       "      <td>-0.005150</td>\n",
       "      <td>0.003414</td>\n",
       "      <td>-0.013928</td>\n",
       "      <td>-0.029473</td>\n",
       "      <td>-0.020909</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>2018-01-16</td>\n",
       "      <td>276.970001</td>\n",
       "      <td>156.139999</td>\n",
       "      <td>77.169998</td>\n",
       "      <td>108.769997</td>\n",
       "      <td>0.037885</td>\n",
       "      <td>0.042573</td>\n",
       "      <td>0.083099</td>\n",
       "      <td>-0.047402</td>\n",
       "      <td>-0.060278</td>\n",
       "      <td>...</td>\n",
       "      <td>0.040240</td>\n",
       "      <td>0.044275</td>\n",
       "      <td>0.145898</td>\n",
       "      <td>0.017294</td>\n",
       "      <td>0.002203</td>\n",
       "      <td>-0.006987</td>\n",
       "      <td>0.006661</td>\n",
       "      <td>-0.015091</td>\n",
       "      <td>-0.024281</td>\n",
       "      <td>-0.010634</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>2018-01-17</td>\n",
       "      <td>279.609985</td>\n",
       "      <td>157.619995</td>\n",
       "      <td>77.720001</td>\n",
       "      <td>108.650002</td>\n",
       "      <td>0.040332</td>\n",
       "      <td>0.049154</td>\n",
       "      <td>0.093123</td>\n",
       "      <td>-0.035732</td>\n",
       "      <td>-0.057482</td>\n",
       "      <td>...</td>\n",
       "      <td>0.035339</td>\n",
       "      <td>0.055797</td>\n",
       "      <td>0.172681</td>\n",
       "      <td>0.008190</td>\n",
       "      <td>0.010808</td>\n",
       "      <td>-0.005062</td>\n",
       "      <td>-0.007994</td>\n",
       "      <td>0.002618</td>\n",
       "      <td>-0.013252</td>\n",
       "      <td>-0.016184</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>2018-01-18</td>\n",
       "      <td>279.140015</td>\n",
       "      <td>156.539993</td>\n",
       "      <td>76.959999</td>\n",
       "      <td>108.410004</td>\n",
       "      <td>0.032055</td>\n",
       "      <td>0.040790</td>\n",
       "      <td>0.085683</td>\n",
       "      <td>-0.043619</td>\n",
       "      <td>-0.071876</td>\n",
       "      <td>...</td>\n",
       "      <td>0.014517</td>\n",
       "      <td>0.043739</td>\n",
       "      <td>0.160845</td>\n",
       "      <td>0.008741</td>\n",
       "      <td>0.003768</td>\n",
       "      <td>-0.008210</td>\n",
       "      <td>0.001980</td>\n",
       "      <td>-0.004973</td>\n",
       "      <td>-0.016951</td>\n",
       "      <td>-0.006761</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>2018-01-19</td>\n",
       "      <td>280.410004</td>\n",
       "      <td>158.600006</td>\n",
       "      <td>77.459999</td>\n",
       "      <td>108.180000</td>\n",
       "      <td>0.032399</td>\n",
       "      <td>0.049556</td>\n",
       "      <td>0.094881</td>\n",
       "      <td>-0.022093</td>\n",
       "      <td>-0.037405</td>\n",
       "      <td>...</td>\n",
       "      <td>0.036060</td>\n",
       "      <td>0.065431</td>\n",
       "      <td>0.185794</td>\n",
       "      <td>-0.017688</td>\n",
       "      <td>-0.012910</td>\n",
       "      <td>-0.009059</td>\n",
       "      <td>-0.030076</td>\n",
       "      <td>0.004778</td>\n",
       "      <td>0.008629</td>\n",
       "      <td>-0.012387</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>2018-01-22</td>\n",
       "      <td>282.690002</td>\n",
       "      <td>159.449997</td>\n",
       "      <td>78.089996</td>\n",
       "      <td>108.139999</td>\n",
       "      <td>0.033904</td>\n",
       "      <td>0.058645</td>\n",
       "      <td>0.101848</td>\n",
       "      <td>-0.015134</td>\n",
       "      <td>-0.019339</td>\n",
       "      <td>...</td>\n",
       "      <td>0.039575</td>\n",
       "      <td>0.068915</td>\n",
       "      <td>0.186031</td>\n",
       "      <td>-0.066362</td>\n",
       "      <td>-0.052375</td>\n",
       "      <td>-0.004716</td>\n",
       "      <td>-0.072311</td>\n",
       "      <td>0.013987</td>\n",
       "      <td>0.061646</td>\n",
       "      <td>-0.005949</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>2018-01-23</td>\n",
       "      <td>283.290009</td>\n",
       "      <td>159.960007</td>\n",
       "      <td>79.169998</td>\n",
       "      <td>108.400002</td>\n",
       "      <td>0.034207</td>\n",
       "      <td>0.058711</td>\n",
       "      <td>0.109679</td>\n",
       "      <td>-0.007148</td>\n",
       "      <td>-0.002143</td>\n",
       "      <td>...</td>\n",
       "      <td>0.042288</td>\n",
       "      <td>0.077535</td>\n",
       "      <td>0.194801</td>\n",
       "      <td>-0.049984</td>\n",
       "      <td>-0.062018</td>\n",
       "      <td>-0.009963</td>\n",
       "      <td>-0.064204</td>\n",
       "      <td>-0.012034</td>\n",
       "      <td>0.040021</td>\n",
       "      <td>-0.014219</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>2018-01-24</td>\n",
       "      <td>283.179993</td>\n",
       "      <td>158.970001</td>\n",
       "      <td>78.889999</td>\n",
       "      <td>108.290001</td>\n",
       "      <td>0.031471</td>\n",
       "      <td>0.058577</td>\n",
       "      <td>0.107816</td>\n",
       "      <td>0.000888</td>\n",
       "      <td>-0.011899</td>\n",
       "      <td>...</td>\n",
       "      <td>0.037731</td>\n",
       "      <td>0.068634</td>\n",
       "      <td>0.169499</td>\n",
       "      <td>-0.054771</td>\n",
       "      <td>-0.062365</td>\n",
       "      <td>-0.011174</td>\n",
       "      <td>-0.057432</td>\n",
       "      <td>-0.007595</td>\n",
       "      <td>0.043597</td>\n",
       "      <td>-0.002662</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>2018-01-25</td>\n",
       "      <td>283.299988</td>\n",
       "      <td>159.029999</td>\n",
       "      <td>78.739998</td>\n",
       "      <td>108.570000</td>\n",
       "      <td>0.033489</td>\n",
       "      <td>0.060294</td>\n",
       "      <td>0.099298</td>\n",
       "      <td>0.011302</td>\n",
       "      <td>-0.018572</td>\n",
       "      <td>...</td>\n",
       "      <td>0.037513</td>\n",
       "      <td>0.061686</td>\n",
       "      <td>0.159026</td>\n",
       "      <td>-0.090611</td>\n",
       "      <td>-0.088265</td>\n",
       "      <td>-0.015382</td>\n",
       "      <td>-0.085456</td>\n",
       "      <td>0.002345</td>\n",
       "      <td>0.075229</td>\n",
       "      <td>0.005155</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>2018-01-26</td>\n",
       "      <td>286.579987</td>\n",
       "      <td>159.600006</td>\n",
       "      <td>78.769997</td>\n",
       "      <td>108.370003</td>\n",
       "      <td>0.037882</td>\n",
       "      <td>0.072048</td>\n",
       "      <td>0.116183</td>\n",
       "      <td>0.015208</td>\n",
       "      <td>-0.021734</td>\n",
       "      <td>...</td>\n",
       "      <td>0.042252</td>\n",
       "      <td>0.076850</td>\n",
       "      <td>0.167862</td>\n",
       "      <td>-0.087515</td>\n",
       "      <td>-0.069697</td>\n",
       "      <td>-0.014857</td>\n",
       "      <td>-0.080388</td>\n",
       "      <td>0.017818</td>\n",
       "      <td>0.072658</td>\n",
       "      <td>0.007126</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>2018-01-29</td>\n",
       "      <td>284.679993</td>\n",
       "      <td>158.699997</td>\n",
       "      <td>77.760002</td>\n",
       "      <td>108.180000</td>\n",
       "      <td>0.024323</td>\n",
       "      <td>0.062754</td>\n",
       "      <td>0.107058</td>\n",
       "      <td>0.010395</td>\n",
       "      <td>-0.039881</td>\n",
       "      <td>...</td>\n",
       "      <td>0.032329</td>\n",
       "      <td>0.063245</td>\n",
       "      <td>0.165284</td>\n",
       "      <td>-0.067936</td>\n",
       "      <td>-0.054784</td>\n",
       "      <td>-0.012849</td>\n",
       "      <td>-0.066415</td>\n",
       "      <td>0.013152</td>\n",
       "      <td>0.055087</td>\n",
       "      <td>0.001521</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>2018-01-30</td>\n",
       "      <td>281.760010</td>\n",
       "      <td>157.179993</td>\n",
       "      <td>77.339996</td>\n",
       "      <td>108.010002</td>\n",
       "      <td>0.017294</td>\n",
       "      <td>0.055835</td>\n",
       "      <td>0.094256</td>\n",
       "      <td>0.002203</td>\n",
       "      <td>-0.045303</td>\n",
       "      <td>...</td>\n",
       "      <td>0.030959</td>\n",
       "      <td>0.060093</td>\n",
       "      <td>0.170452</td>\n",
       "      <td>-0.055934</td>\n",
       "      <td>-0.042410</td>\n",
       "      <td>-0.011018</td>\n",
       "      <td>-0.055351</td>\n",
       "      <td>0.013524</td>\n",
       "      <td>0.044917</td>\n",
       "      <td>0.000584</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>20 rows × 27 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "          Date          sp         rut         re         bnd  sp_10_dys  \\\n",
       "0   2018-01-02  268.769989  153.899994  80.599998  109.169998   0.008480   \n",
       "1   2018-01-03  270.470001  154.059998  80.470001  109.180000   0.008464   \n",
       "2   2018-01-04  271.609985  154.470001  79.209999  109.110001   0.016619   \n",
       "3   2018-01-05  273.420013  154.789993  79.290001  109.040001   0.023930   \n",
       "4   2018-01-08  273.920013  155.029999  79.739998  109.010002   0.023694   \n",
       "5   2018-01-09  274.540009  154.820007  78.820000  108.709999   0.026279   \n",
       "6   2018-01-10  274.119995  154.839996  77.860001  108.709999   0.025937   \n",
       "7   2018-01-11  276.119995  157.500000  77.589996  108.760002   0.032919   \n",
       "8   2018-01-12  277.920013  158.160004  76.959999  108.739998   0.037518   \n",
       "9   2018-01-16  276.970001  156.139999  77.169998  108.769997   0.037885   \n",
       "10  2018-01-17  279.609985  157.619995  77.720001  108.650002   0.040332   \n",
       "11  2018-01-18  279.140015  156.539993  76.959999  108.410004   0.032055   \n",
       "12  2018-01-19  280.410004  158.600006  77.459999  108.180000   0.032399   \n",
       "13  2018-01-22  282.690002  159.449997  78.089996  108.139999   0.033904   \n",
       "14  2018-01-23  283.290009  159.960007  79.169998  108.400002   0.034207   \n",
       "15  2018-01-24  283.179993  158.970001  78.889999  108.290001   0.031471   \n",
       "16  2018-01-25  283.299988  159.029999  78.739998  108.570000   0.033489   \n",
       "17  2018-01-26  286.579987  159.600006  78.769997  108.370003   0.037882   \n",
       "18  2018-01-29  284.679993  158.699997  77.760002  108.180000   0.024323   \n",
       "19  2018-01-30  281.760010  157.179993  77.339996  108.010002   0.017294   \n",
       "\n",
       "    sp_20_dys  sp_60_dys  re_10_dys  re_20_dys  ...  rut_20_dys  rut_60_dys  \\\n",
       "0    0.016297   0.055407  -0.022556  -0.018510  ...    0.005751    0.024225   \n",
       "1    0.023965   0.063294  -0.029547  -0.012517  ...    0.010561    0.026724   \n",
       "2    0.031992   0.069541  -0.015658  -0.022220  ...    0.023455    0.033728   \n",
       "3    0.038672   0.073836  -0.004270  -0.020869  ...    0.030422    0.032897   \n",
       "4    0.037301   0.074112   0.005042  -0.019309  ...    0.024856    0.035259   \n",
       "5    0.034010   0.078150  -0.012776  -0.033832  ...    0.022522    0.034616   \n",
       "6    0.029327   0.075191  -0.029540  -0.046651  ...    0.023059    0.036620   \n",
       "7    0.035010   0.081593  -0.036388  -0.053781  ...    0.043876    0.055347   \n",
       "8    0.041874   0.087877  -0.049759  -0.063405  ...    0.042035    0.062832   \n",
       "9    0.042573   0.083099  -0.047402  -0.060278  ...    0.040240    0.044275   \n",
       "10   0.049154   0.093123  -0.035732  -0.057482  ...    0.035339    0.055797   \n",
       "11   0.040790   0.085683  -0.043619  -0.071876  ...    0.014517    0.043739   \n",
       "12   0.049556   0.094881  -0.022093  -0.037405  ...    0.036060    0.065431   \n",
       "13   0.058645   0.101848  -0.015134  -0.019339  ...    0.039575    0.068915   \n",
       "14   0.058711   0.109679  -0.007148  -0.002143  ...    0.042288    0.077535   \n",
       "15   0.058577   0.107816   0.000888  -0.011899  ...    0.037731    0.068634   \n",
       "16   0.060294   0.099298   0.011302  -0.018572  ...    0.037513    0.061686   \n",
       "17   0.072048   0.116183   0.015208  -0.021734  ...    0.042252    0.076850   \n",
       "18   0.062754   0.107058   0.010395  -0.039881  ...    0.032329    0.063245   \n",
       "19   0.055835   0.094256   0.002203  -0.045303  ...    0.030959    0.060093   \n",
       "\n",
       "    rut_252_dys  sp_fut_10dys  re_fut_10dys  bnd_fut_10dys  rut_fut_10dys  \\\n",
       "0      0.141268      0.040332     -0.035732      -0.004763       0.024172   \n",
       "1      0.136806      0.032055     -0.043619      -0.007053       0.016098   \n",
       "2      0.121135      0.032399     -0.022093      -0.008524       0.026737   \n",
       "3      0.136574      0.033904     -0.015134      -0.008254       0.030105   \n",
       "4      0.142531      0.034207     -0.007148      -0.005596       0.031800   \n",
       "5      0.148516      0.031471      0.000888      -0.003863       0.026805   \n",
       "6      0.137776      0.033489      0.011302      -0.001288       0.027060   \n",
       "7      0.155285      0.037882      0.015208      -0.003586       0.013333   \n",
       "8      0.169131      0.024323      0.010395      -0.005150       0.003414   \n",
       "9      0.145898      0.017294      0.002203      -0.006987       0.006661   \n",
       "10     0.172681      0.008190      0.010808      -0.005062      -0.007994   \n",
       "11     0.160845      0.008741      0.003768      -0.008210       0.001980   \n",
       "12     0.185794     -0.017688     -0.012910      -0.009059      -0.030076   \n",
       "13     0.186031     -0.066362     -0.052375      -0.004716      -0.072311   \n",
       "14     0.194801     -0.049984     -0.062018      -0.009963      -0.064204   \n",
       "15     0.169499     -0.054771     -0.062365      -0.011174      -0.057432   \n",
       "16     0.159026     -0.090611     -0.088265      -0.015382      -0.085456   \n",
       "17     0.167862     -0.087515     -0.069697      -0.014857      -0.080388   \n",
       "18     0.165284     -0.067936     -0.054784      -0.012849      -0.066415   \n",
       "19     0.170452     -0.055934     -0.042410      -0.011018      -0.055351   \n",
       "\n",
       "    re_sp_10dys_diff  bnd_sp_10dys_diff  rut_sp_10dys_diff  \n",
       "0          -0.076064          -0.045095          -0.016160  \n",
       "1          -0.075674          -0.039108          -0.015958  \n",
       "2          -0.054493          -0.040923          -0.005663  \n",
       "3          -0.049038          -0.042158          -0.003799  \n",
       "4          -0.041355          -0.039803          -0.002407  \n",
       "5          -0.030583          -0.035334          -0.004665  \n",
       "6          -0.022187          -0.034777          -0.006429  \n",
       "7          -0.022674          -0.041468          -0.024549  \n",
       "8          -0.013928          -0.029473          -0.020909  \n",
       "9          -0.015091          -0.024281          -0.010634  \n",
       "10          0.002618          -0.013252          -0.016184  \n",
       "11         -0.004973          -0.016951          -0.006761  \n",
       "12          0.004778           0.008629          -0.012387  \n",
       "13          0.013987           0.061646          -0.005949  \n",
       "14         -0.012034           0.040021          -0.014219  \n",
       "15         -0.007595           0.043597          -0.002662  \n",
       "16          0.002345           0.075229           0.005155  \n",
       "17          0.017818           0.072658           0.007126  \n",
       "18          0.013152           0.055087           0.001521  \n",
       "19          0.013524           0.044917           0.000584  \n",
       "\n",
       "[20 rows x 27 columns]"
      ]
     },
     "execution_count": 68,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_test[0: 20]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "id": "dd0063b6-1ad9-45d0-a086-b8f6e2a0c9b5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(251, 27)"
      ]
     },
     "execution_count": 69,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_test.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "id": "30e27e5c",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "start\n",
      "0\n",
      "10\n",
      "20\n",
      "30\n",
      "40\n",
      "50\n",
      "60\n",
      "70\n",
      "80\n",
      "90\n",
      "100\n",
      "110\n",
      "120\n",
      "130\n",
      "140\n",
      "150\n",
      "160\n",
      "170\n",
      "180\n",
      "190\n",
      "200\n",
      "210\n",
      "220\n",
      "230\n",
      "240\n",
      "250\n"
     ]
    }
   ],
   "source": [
    "preds, actuals = test_preds(aliases_to_use, baseline_asset, pred_distance, df_test, df_train)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a354470e-9d90-4b02-bb13-300c7855f4c9",
   "metadata": {},
   "source": [
    "###### import pickle \n",
    "\n",
    "with open('preds.pkl', 'wb') as f:\n",
    "    pickle.dump(preds, f)\n",
    "\n",
    "with open('actuals.pkl', 'wb') as f:\n",
    "    pickle.dump(actuals, f)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "857c67ca",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pickle\n",
    "with open(\"preds.pkl\",'rb') as f:\n",
    "    preds = pickle.load(f)\n",
    "    \n",
    "with open(\"actuals.pkl\",'rb') as f:\n",
    "    actuals = pickle.load(f)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "035f4422",
   "metadata": {},
   "outputs": [],
   "source": [
    "sign_cor_neg = 0\n",
    "sign_cor_pos = 0\n",
    "incor_actual_neg = 0\n",
    "incor_actual_pos = 0\n",
    "total_diff = 0\n",
    "total_count = 0\n",
    "total_correct = 0\n",
    "\n",
    "for pred, actual in zip(preds['re'], actuals['re']):\n",
    "    if pred != None and not pd.isna(actual):\n",
    "        if pred < 0 and actual < 0:\n",
    "            sign_cor_neg += 1\n",
    "            total_correct += 1\n",
    "        elif pred > 0 and actual > 0:\n",
    "            sign_cor_pos += 1\n",
    "            total_correct += 1\n",
    "        elif actual < 0:\n",
    "            incor_actual_neg += 1\n",
    "        else:\n",
    "            incor_actual_pos +=1\n",
    "        total_count += 1\n",
    "        total_diff += abs(pred - actual)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "id": "44d548df",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "pred neg actual neg\n",
      "96\n",
      "pred pos actual pos\n",
      "34\n",
      "pred pos actual neg\n",
      "28\n",
      "pred neg actual pos\n",
      "93\n",
      "-----\n",
      "total neg\n",
      "124\n",
      "total pos\n",
      "127\n",
      "----\n",
      "ave diff\n",
      "0.02320293908579901\n",
      "percent correct\n",
      "0.5179282868525896\n"
     ]
    }
   ],
   "source": [
    "print(\"pred neg actual neg\")\n",
    "print(sign_cor_neg)\n",
    "print(\"pred pos actual pos\")\n",
    "print(sign_cor_pos)\n",
    "print(\"pred pos actual neg\")\n",
    "print(incor_actual_neg) \n",
    "print(\"pred neg actual pos\")\n",
    "print(incor_actual_pos )\n",
    "\n",
    "print(\"-----\")\n",
    "print(\"total neg\")\n",
    "print(sign_cor_neg + incor_actual_neg)\n",
    "print(\"total pos\")\n",
    "print(sign_cor_pos + incor_actual_pos)\n",
    "print(\"----\")\n",
    "print(\"ave diff\")\n",
    "print(total_diff/total_count)\n",
    "print(\"percent correct\")\n",
    "print(total_correct/total_count)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "id": "fcb11bcf",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "re\n",
      "average\n",
      "0.9976854966704563\n",
      "bnd\n",
      "average\n",
      "1.0014375883954618\n",
      "eu\n",
      "average\n",
      "0.9952507210343142\n",
      "jp\n",
      "average\n",
      "0.9988471701123618\n",
      "all asset average\n",
      "0.9983052440531486\n"
     ]
    }
   ],
   "source": [
    "\n",
    "all_asset_total = 0\n",
    "asset_num = 0\n",
    "\n",
    "for a in aliases_to_use:\n",
    "    if a != baseline_asset :\n",
    "    # and a != \"eu\" and a != \"gld\" and a != \"jp\":\n",
    "        asset_num += 1\n",
    "        test_asset = a\n",
    "        print(test_asset)\n",
    "        \n",
    "        asset_total = 0\n",
    "        \n",
    "        for i in range(pred_distance):\n",
    "            offset = i\n",
    "            count = 0\n",
    "            total = 1\n",
    "            period_counts = 0\n",
    "            for date, pred, actual in zip(df_test[\"Date\"][offset:], preds[test_asset][offset:], actuals[test_asset][offset:]):\n",
    "                if pred != None and not pd.isna(actual):\n",
    "                    if count == 10:\n",
    "                        # if pred > .01:\n",
    "                        if pred > 0:\n",
    "                            total *= (1 + 10 * pred * actual)\n",
    "                            # print(\"long \" + str(pred)[0:7] + \" \" + str(actual)[0:7]+ \": \" + str(date) + \": \" + str(total))\n",
    "                        # if pred < -.01:\n",
    "                        if pred < 0:\n",
    "                            total *= (1 + 10 * abs(pred) * -(actual))\n",
    "                            # print(\"shorted \" + str(pred)[0:7] + \" \" + str(actual)[0:7] +  \": \" + str(date) + \": \" + str(total))\n",
    "                        period_counts += 1\n",
    "                #         else:\n",
    "                #             total *= (1 + actual)\n",
    "                        \n",
    "                        count = 0\n",
    "                    count += 1\n",
    "                \n",
    "                \n",
    "            # print(offset)\n",
    "            # print(total)\n",
    "            asset_total += total\n",
    "            # print(period_counts)\n",
    "        print(\"average\")\n",
    "        print(asset_total / pred_distance)\n",
    "        all_asset_total += asset_total / pred_distance\n",
    "print(\"all asset average\")\n",
    "print(all_asset_total/ (asset_num))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8269a262-1b0f-4a85-9102-67e07263031d",
   "metadata": {},
   "source": [
    "##### "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a543b5e8-aec8-454f-839d-895491f909e3",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "91ef69b8-cefd-4f3f-b633-63ee8f55e3a8",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "703d1804-89b2-4bbc-90d7-952921840070",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a499f26f",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
